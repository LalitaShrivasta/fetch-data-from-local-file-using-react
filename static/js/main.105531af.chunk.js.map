{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onsearchinput","e","setState","inputfield","target","value","console","log","state","filtermethod","emogis","filter","data","title","toLowerCase","indexOf","toLocaleLowerCase","keywords","react_default","a","createElement","className","src","alt","vlaue","search","onChange","placeholder","slice","map","index","key","symbol","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y52JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6LCoDzBC,cA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFI,cAAgB,SAAAC,GACdR,EAAKS,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,QACrCC,QAAQC,IAAIN,EAAEG,OAAOC,QAPrBZ,EAAKe,MAAQ,CACXL,WAAY,IAHFV,wEAYL,IACCU,EAAeP,KAAKY,MAApBL,WACFM,EAAeC,EAAOC,OAAO,SAAAC,GACjC,OACwE,IAAtEA,EAAKC,MAAMC,cAAcC,QAAQZ,EAAWa,uBAGyB,IAAnEJ,EAAKK,SAASH,cAAcC,QAAQZ,EAAWW,iBAKrD,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,+HAA+HC,IAAI,SAC5IL,EAAAC,EAAAC,cAAA,4BAEAF,EAAAC,EAAAC,cAAA,SAAOI,MAAO5B,KAAKY,MAAMiB,OAAQC,SAAU9B,KAAKI,cAAe2B,YAAY,WAC3ET,EAAAC,EAAAC,cAAA,UACGX,EAAamB,MAAM,EAAG,IAAIC,IAAI,SAASjB,EAAMkB,GAC5C,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOU,IAAKD,GACzBZ,EAAAC,EAAAC,cAAA,YAAQR,EAAKC,OACbK,EAAAC,EAAAC,cAAA,YAAOR,EAAKoB,oBArCVC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.105531af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport emogis from \"./components/emogis.json\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      inputfield: \"\"\n    };\n  }\n\n  onsearchinput = e => {\n    this.setState({ inputfield: e.target.value });\n    console.log(e.target.value);\n  };\n\n  render() {\n    const { inputfield } = this.state;\n    const filtermethod = emogis.filter(data => {\n      if (\n        data.title.toLowerCase().indexOf(inputfield.toLocaleLowerCase()) !== -1\n      )\n        return true;\n      if (data.keywords.toLowerCase().indexOf(inputfield.toLowerCase()) !== -1)\n        return true;\n      return false;\n    });\n\n    return (\n      <div>\n        <div className=\"imgbox\">\n        <img src=\"https://png2.kisspng.com/20180418/wee/kisspng-emoji-search-emoticon-smiley-android-5ad7f1d311fa02.9431952515241015870736.png\" alt=\"imag\"/>\n        <h1>Search Emojis</h1>\n        </div>\n        <input vlaue={this.state.search} onChange={this.onsearchinput} placeholder=\"Search\"/>\n        <ul>\n          {filtermethod.slice(0, 20).map(function(data, index) {\n            return (\n              <div className=\"div1\" key={index}>\n                <span >{data.title}</span>\n                <span>{data.symbol}</span>\n              </div>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}